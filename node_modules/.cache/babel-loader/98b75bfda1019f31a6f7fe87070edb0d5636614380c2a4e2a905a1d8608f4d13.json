{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/components/MatrixComponents/MatrixComponents.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// Define types for CellId and CellValue\n\n// Define the structure of a Cell\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixComponent = ({\n  M,\n  N\n}) => {\n  _s();\n  const [matrix, setMatrix] = useState([]);\n\n  // Helper function to generate a random three-digit number\n  const generateRandomAmount = () => Math.floor(100 + Math.random() * 900);\n\n  // Generate the matrix with unique CellIds and random amounts\n  useEffect(() => {\n    const generatedMatrix = [];\n    let idCounter = 1;\n    for (let row = 0; row < M; row++) {\n      const rowArray = [];\n      for (let col = 0; col < N; col++) {\n        rowArray.push({\n          id: idCounter++,\n          amount: generateRandomAmount()\n        });\n      }\n      generatedMatrix.push(rowArray);\n    }\n    setMatrix(generatedMatrix);\n  }, [M, N]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Matrix \", M, \"x\", N]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: 1,\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"ID: \", cell.id, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }, this), \"Value: \", cell.amount]\n          }, cell.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(MatrixComponent, \"IpKR+mNvf6EI4ZyEf9QH9sEtP5A=\");\n_c = MatrixComponent;\nexport default MatrixComponent;\nvar _c;\n$RefreshReg$(_c, \"MatrixComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","MatrixComponent","M","N","_s","matrix","setMatrix","generateRandomAmount","Math","floor","random","generatedMatrix","idCounter","row","rowArray","col","push","id","amount","children","fileName","_jsxFileName","lineNumber","columnNumber","border","map","rowIndex","cell","_c","$RefreshReg$"],"sources":["/home/user/memcrab/src/components/MatrixComponents/MatrixComponents.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// Define types for CellId and CellValue\ntype CellId = number;\ntype CellValue = number;\n\n// Define the structure of a Cell\ntype Cell = {\n  id: CellId;     // Unique value for the cell\n  amount: CellValue; // Random three-digit number\n};\n\ninterface MatrixComponentProps {\n  M: number; // Number of rows\n  N: number; // Number of columns\n}\n\nconst MatrixComponent: React.FC<MatrixComponentProps> = ({ M, N }) => {\n  const [matrix, setMatrix] = useState<Cell[][]>([]);\n\n  // Helper function to generate a random three-digit number\n  const generateRandomAmount = () => Math.floor(100 + Math.random() * 900);\n\n  // Generate the matrix with unique CellIds and random amounts\n  useEffect(() => {\n    const generatedMatrix: Cell[][] = [];\n    let idCounter = 1;\n\n    for (let row = 0; row < M; row++) {\n      const rowArray: Cell[] = [];\n      for (let col = 0; col < N; col++) {\n        rowArray.push({\n          id: idCounter++,\n          amount: generateRandomAmount(),\n        });\n      }\n      generatedMatrix.push(rowArray);\n    }\n\n    setMatrix(generatedMatrix);\n  }, [M, N]);\n\n  return (\n    <div>\n      <h2>Matrix {M}x{N}</h2>\n      <table border={1}>\n        <tbody>\n          {matrix.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell) => (\n                <td key={cell.id}>\n                  ID: {cell.id} <br />\n                  Value: {cell.amount}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default MatrixComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;;AAIA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,eAA+C,GAAGA,CAAC;EAAEC,CAAC;EAAEC;AAAE,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAW,EAAE,CAAC;;EAElD;EACA,MAAMS,oBAAoB,GAAGA,CAAA,KAAMC,IAAI,CAACC,KAAK,CAAC,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;;EAExE;EACAb,SAAS,CAAC,MAAM;IACd,MAAMc,eAAyB,GAAG,EAAE;IACpC,IAAIC,SAAS,GAAG,CAAC;IAEjB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,CAAC,EAAEW,GAAG,EAAE,EAAE;MAChC,MAAMC,QAAgB,GAAG,EAAE;MAC3B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGZ,CAAC,EAAEY,GAAG,EAAE,EAAE;QAChCD,QAAQ,CAACE,IAAI,CAAC;UACZC,EAAE,EAAEL,SAAS,EAAE;UACfM,MAAM,EAAEX,oBAAoB,CAAC;QAC/B,CAAC,CAAC;MACJ;MACAI,eAAe,CAACK,IAAI,CAACF,QAAQ,CAAC;IAChC;IAEAR,SAAS,CAACK,eAAe,CAAC;EAC5B,CAAC,EAAE,CAACT,CAAC,EAAEC,CAAC,CAAC,CAAC;EAEV,oBACEH,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,GAAI,SAAO,EAACjB,CAAC,EAAC,GAAC,EAACC,CAAC;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBvB,OAAA;MAAOwB,MAAM,EAAE,CAAE;MAAAL,QAAA,eACfnB,OAAA;QAAAmB,QAAA,EACGd,MAAM,CAACoB,GAAG,CAAC,CAACZ,GAAG,EAAEa,QAAQ,kBACxB1B,OAAA;UAAAmB,QAAA,EACGN,GAAG,CAACY,GAAG,CAAEE,IAAI,iBACZ3B,OAAA;YAAAmB,QAAA,GAAkB,MACZ,EAACQ,IAAI,CAACV,EAAE,EAAC,GAAC,eAAAjB,OAAA;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,WACb,EAACI,IAAI,CAACT,MAAM;UAAA,GAFZS,IAAI,CAACV,EAAE;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGZ,CACL;QAAC,GANKG,QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACnB,EAAA,CA5CIH,eAA+C;AAAA2B,EAAA,GAA/C3B,eAA+C;AA8CrD,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}