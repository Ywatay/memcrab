{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/components/MatrixTable/MatrixTable.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Table, TableBody, TableFooter, TableCell, TableContainer, Paper } from '@mui/material';\nimport MatrixHeader from './MatrixHeader';\nimport MatrixRow from './MatrixRow';\nimport { calculateRowSum, calculateColumnMedians } from '../../utils/matrixUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixTable = ({\n  matrix,\n  onCellUpdate,\n  onRemoveCell,\n  onRemoveRow,\n  onRemoveColumn\n}) => {\n  _s();\n  var _matrix$;\n  const [hoveredCell, setHoveredCell] = React.useState(null);\n  const [nearestCells, setNearestCells] = React.useState(new Set());\n  const [hoveredSumRowIndex, setHoveredSumRowIndex] = React.useState(null);\n  const numRows = matrix.length;\n  const numCols = ((_matrix$ = matrix[0]) === null || _matrix$ === void 0 ? void 0 : _matrix$.length) || 0;\n  const findNearestCells = React.useCallback((cell, X) => {\n    const allCells = matrix.flat();\n    const sortedCells = allCells.map(c => ({\n      ...c,\n      distance: Math.abs(c.amount - cell.amount)\n    })).sort((a, b) => a.distance - b.distance).slice(0, X);\n    setNearestCells(new Set(sortedCells.map(c => c.id)));\n  }, [matrix]);\n  const handleCellClick = (rowIndex, colIndex) => {\n    const newAmount = matrix[rowIndex][colIndex].amount + 1;\n    onCellUpdate(rowIndex, colIndex, newAmount);\n  };\n  const handleCellMouseEnter = cell => {\n    setHoveredCell(cell);\n    findNearestCells(cell, 5);\n  };\n  const handleCellMouseLeave = () => {\n    setHoveredCell(null);\n    setNearestCells(new Set());\n  };\n  const handleSumCellMouseEnter = rowIndex => {\n    setHoveredSumRowIndex(rowIndex);\n  };\n  const handleSumCellMouseLeave = () => {\n    setHoveredSumRowIndex(null);\n  };\n  const columnMedians = calculateColumnMedians(matrix);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(MatrixHeader, {\n        numCols: numCols,\n        onRemoveColumn: onRemoveColumn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: [matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(MatrixRow, {\n          row: row,\n          rowIndex: rowIndex,\n          rowSum: calculateRowSum(row),\n          hoveredSumRowIndex: hoveredSumRowIndex,\n          nearestCells: nearestCells,\n          onCellClick: handleCellClick,\n          onCellMouseEnter: handleCellMouseEnter,\n          onCellMouseLeave: handleCellMouseLeave,\n          onRemoveCell: onRemoveCell,\n          onRemoveRow: onRemoveRow\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [Array.from({\n            length: numCols\n          }, (_, colIndex) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Average\"\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableFooter, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [columnMedians.map((median, colIndex) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: median\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Median\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(MatrixTable, \"QIxr1eaBnbEEYA/WnHxp7TZnUBs=\");\n_c = MatrixTable;\nexport default MatrixTable;\nvar _c;\n$RefreshReg$(_c, \"MatrixTable\");","map":{"version":3,"names":["React","Table","TableBody","TableFooter","TableCell","TableContainer","Paper","MatrixHeader","MatrixRow","calculateRowSum","calculateColumnMedians","jsxDEV","_jsxDEV","MatrixTable","matrix","onCellUpdate","onRemoveCell","onRemoveRow","onRemoveColumn","_s","_matrix$","hoveredCell","setHoveredCell","useState","nearestCells","setNearestCells","Set","hoveredSumRowIndex","setHoveredSumRowIndex","numRows","length","numCols","findNearestCells","useCallback","cell","X","allCells","flat","sortedCells","map","c","distance","Math","abs","amount","sort","a","b","slice","id","handleCellClick","rowIndex","colIndex","newAmount","handleCellMouseEnter","handleCellMouseLeave","handleSumCellMouseEnter","handleSumCellMouseLeave","columnMedians","component","children","fileName","_jsxFileName","lineNumber","columnNumber","row","rowSum","onCellClick","onCellMouseEnter","onCellMouseLeave","TableRow","Array","from","_","median","_c","$RefreshReg$"],"sources":["/home/user/memcrab/src/components/MatrixTable/MatrixTable.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Table, TableBody, TableFooter, TableCell, TableContainer, Paper\n} from '@mui/material';\nimport MatrixHeader from './MatrixHeader';\nimport MatrixRow from './MatrixRow';\nimport { Cell } from '../../type/type';\nimport {\n  calculateRowSum,\n  calculateColumnMedians\n} from '../../utils/matrixUtils';\n\ninterface MatrixTableProps {\n  matrix: Cell[][];\n  onCellUpdate: (rowIndex: number, colIndex: number, newAmount: number) => void;\n  onRemoveCell: (rowIndex: number, colIndex: number) => void;\n  onRemoveRow: (rowIndex: number) => void;\n  onRemoveColumn: (colIndex: number) => void;\n}\n\nconst MatrixTable: React.FC<MatrixTableProps> = ({\n  matrix, onCellUpdate, onRemoveCell, onRemoveRow, onRemoveColumn\n}) => {\n  const [hoveredCell, setHoveredCell] = React.useState<Cell | null>(null);\n  const [nearestCells, setNearestCells] = React.useState<Set<number>>(new Set());\n  const [hoveredSumRowIndex, setHoveredSumRowIndex] = React.useState<number | null>(null);\n\n  const numRows = matrix.length;\n  const numCols = matrix[0]?.length || 0;\n\n  const findNearestCells = React.useCallback((cell: Cell, X: number): void => {\n    const allCells = matrix.flat();\n    const sortedCells = allCells\n      .map(c => ({ ...c, distance: Math.abs(c.amount - cell.amount) }))\n      .sort((a, b) => a.distance - b.distance)\n      .slice(0, X);\n\n    setNearestCells(new Set(sortedCells.map(c => c.id)));\n  }, [matrix]);\n\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\n    const newAmount = matrix[rowIndex][colIndex].amount + 1;\n    onCellUpdate(rowIndex, colIndex, newAmount);\n  };\n\n  const handleCellMouseEnter = (cell: Cell) => {\n    setHoveredCell(cell);\n    findNearestCells(cell, 5);\n  };\n\n  const handleCellMouseLeave = () => {\n    setHoveredCell(null);\n    setNearestCells(new Set());\n  };\n\n  const handleSumCellMouseEnter = (rowIndex: number) => {\n    setHoveredSumRowIndex(rowIndex);\n  };\n\n  const handleSumCellMouseLeave = () => {\n    setHoveredSumRowIndex(null);\n  };\n\n  const columnMedians = calculateColumnMedians(matrix);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <MatrixHeader numCols={numCols} onRemoveColumn={onRemoveColumn} />\n        <TableBody>\n          {matrix.map((row, rowIndex) => (\n            <MatrixRow\n              key={rowIndex}\n              row={row}\n              rowIndex={rowIndex}\n              rowSum={calculateRowSum(row)}\n              hoveredSumRowIndex={hoveredSumRowIndex}\n              nearestCells={nearestCells}\n              onCellClick={handleCellClick}\n              onCellMouseEnter={handleCellMouseEnter}\n              onCellMouseLeave={handleCellMouseLeave}\n              onRemoveCell={onRemoveCell}\n              onRemoveRow={onRemoveRow}\n            />\n          ))}\n          <TableRow>\n            {Array.from({ length: numCols }, (_, colIndex) => (\n              <TableCell key={colIndex}>Average</TableCell>\n            ))}\n            <TableCell />\n            <TableCell />\n          </TableRow>\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            {columnMedians.map((median, colIndex) => (\n              <TableCell key={colIndex}>{median}</TableCell>\n            ))}\n            <TableCell>Median</TableCell>\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default MatrixTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}