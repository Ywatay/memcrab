{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MatrixTable from './components/MatrixTable/MatrixTable';\nimport { generateMatrix } from './utils/generateMatrix';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [matrix, setMatrix] = useState(generateMatrix(5, 5));\n  const handleCellUpdate = (rowIndex, colIndex, newAmount) => {\n    setMatrix(prevMatrix => {\n      const newMatrix = prevMatrix.map((row, rIdx) => row.map((cell, cIdx) => {\n        if (rIdx === rowIndex && cIdx === colIndex) {\n          return {\n            ...cell,\n            amount: newAmount\n          };\n        }\n        return cell;\n      }));\n      return newMatrix;\n    });\n  };\n  const handleAddRow = () => {\n    setMatrix(prevMatrix => {\n      var _prevMatrix$;\n      const numCols = ((_prevMatrix$ = prevMatrix[0]) === null || _prevMatrix$ === void 0 ? void 0 : _prevMatrix$.length) || 0;\n      const newRow = generateMatrix(1, numCols)[0];\n      return [...prevMatrix, newRow];\n    });\n  };\n  const handleRemoveRow = rowIndex => {\n    setMatrix(prevMatrix => prevMatrix.filter((_, index) => index !== rowIndex));\n  };\n  const handleRemoveCell = (rowIndex, colIndex) => {\n    setMatrix(prevMatrix => {\n      const newMatrix = prevMatrix.map((row, rIdx) => rIdx === rowIndex ? row.filter((_, cIdx) => cIdx !== colIndex) : row).filter(row => row.length > 0); // Remove rows if they become empty\n      return newMatrix;\n    });\n  };\n  const handleRemoveColumn = colIndex => {\n    setMatrix(prevMatrix => prevMatrix.map(row => row.filter((_, cIdx) => cIdx !== colIndex)));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '16px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleAddRow,\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        marginBottom: '16px'\n      },\n      children: \"Add Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MatrixTable, {\n      matrix: matrix,\n      onCellUpdate: handleCellUpdate,\n      onRemoveCell: handleRemoveCell,\n      onRemoveRow: handleRemoveRow,\n      onRemoveColumn: handleRemoveColumn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"v0oJBLHNs0xCC6NhI+oqLfqoDaY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MatrixTable","generateMatrix","Button","jsxDEV","_jsxDEV","App","_s","matrix","setMatrix","handleCellUpdate","rowIndex","colIndex","newAmount","prevMatrix","newMatrix","map","row","rIdx","cell","cIdx","amount","handleAddRow","_prevMatrix$","numCols","length","newRow","handleRemoveRow","filter","_","index","handleRemoveCell","handleRemoveColumn","style","padding","children","onClick","variant","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onCellUpdate","onRemoveCell","onRemoveRow","onRemoveColumn","_c","$RefreshReg$"],"sources":["/home/user/memcrab/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport MatrixTable from './components/MatrixTable/MatrixTable';\nimport { Cell } from './type/type';\nimport { generateMatrix } from './utils/generateMatrix';\nimport { Button } from '@mui/material';\n\nconst App: React.FC = () => {\n  const [matrix, setMatrix] = useState<Cell[][]>(generateMatrix(5, 5));\n\n  const handleCellUpdate = (rowIndex: number, colIndex: number, newAmount: number) => {\n    setMatrix(prevMatrix => {\n      const newMatrix = prevMatrix.map((row, rIdx) =>\n        row.map((cell, cIdx) => {\n          if (rIdx === rowIndex && cIdx === colIndex) {\n            return { ...cell, amount: newAmount };\n          }\n          return cell;\n        })\n      );\n      return newMatrix;\n    });\n  };\n\n  const handleAddRow = () => {\n    setMatrix(prevMatrix => {\n      const numCols = prevMatrix[0]?.length || 0;\n      const newRow = generateMatrix(1, numCols)[0];\n      return [...prevMatrix, newRow];\n    });\n  };\n\n  const handleRemoveRow = (rowIndex: number) => {\n    setMatrix(prevMatrix => prevMatrix.filter((_, index) => index !== rowIndex));\n  };\n\n  const handleRemoveCell = (rowIndex: number, colIndex: number) => {\n    setMatrix(prevMatrix => {\n      const newMatrix = prevMatrix.map((row, rIdx) =>\n        rIdx === rowIndex\n          ? row.filter((_, cIdx) => cIdx !== colIndex)\n          : row\n      ).filter(row => row.length > 0); // Remove rows if they become empty\n      return newMatrix;\n    });\n  };\n\n  const handleRemoveColumn = (colIndex: number) => {\n    setMatrix(prevMatrix => prevMatrix.map(row => \n      row.filter((_, cIdx) => cIdx !== colIndex)\n    ));\n  };\n\n  return (\n    <div style={{ padding: '16px' }}>\n      <Button\n        onClick={handleAddRow}\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ marginBottom: '16px' }}\n      >\n        Add Row\n      </Button>\n      <MatrixTable\n        matrix={matrix}\n        onCellUpdate={handleCellUpdate}\n        onRemoveCell={handleRemoveCell}\n        onRemoveRow={handleRemoveRow}\n        onRemoveColumn={handleRemoveColumn}\n      />\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}