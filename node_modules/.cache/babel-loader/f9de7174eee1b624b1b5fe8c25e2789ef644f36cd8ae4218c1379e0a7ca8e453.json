{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/components/MatrixTable/MatrixTable.tsx\";\nimport React from \"react\";\nimport { calculateMedian } from \"../../utils/calculateMedian\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixTable = ({\n  matrix\n}) => {\n  // Calculate the sum for each row\n  const calculateRowSum = row => {\n    return row.reduce((sum, cell) => sum + cell.amount, 0);\n  };\n\n  // Extract column values from the matrix\n  const extractColumnValues = (matrix, columnIndex) => {\n    return matrix.map(row => row[columnIndex].amount);\n  };\n\n  // Calculate the median for each column\n  const calculateColumnMedians = () => {\n    var _matrix$;\n    const numOfColumns = ((_matrix$ = matrix[0]) === null || _matrix$ === void 0 ? void 0 : _matrix$.length) || 0;\n    const medians = [];\n    for (let col = 0; col < numOfColumns; col++) {\n      const columnValues = extractColumnValues(matrix, col);\n      medians.push(calculateMedian(columnValues));\n    }\n    return medians;\n  };\n  const columnMedians = calculateColumnMedians();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Matrix Table View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: 1,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [matrix[0].map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Column \", colIndex + 1]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Row Sum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [row.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell.amount\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: calculateRowSum(row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), \" \"]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [columnMedians.map((median, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: median\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Median\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = MatrixTable;\nexport default MatrixTable;\nvar _c;\n$RefreshReg$(_c, \"MatrixTable\");","map":{"version":3,"names":["React","calculateMedian","jsxDEV","_jsxDEV","MatrixTable","matrix","calculateRowSum","row","reduce","sum","cell","amount","extractColumnValues","columnIndex","map","calculateColumnMedians","_matrix$","numOfColumns","length","medians","col","columnValues","push","columnMedians","children","fileName","_jsxFileName","lineNumber","columnNumber","border","_","colIndex","rowIndex","id","median","_c","$RefreshReg$"],"sources":["/home/user/memcrab/src/components/MatrixTable/MatrixTable.tsx"],"sourcesContent":["import React from \"react\";\nimport { Cell } from \"../MatrixComponents/MatrixComponents\";\nimport { calculateMedian } from \"../../utils/calculateMedian\";\n\ninterface MatrixTableProps {\n  matrix: Cell[][]; // The generated matrix data\n}\n\nconst MatrixTable: React.FC<MatrixTableProps> = ({ matrix }) => {\n  // Calculate the sum for each row\n  const calculateRowSum = (row: Cell[]): number => {\n    return row.reduce((sum, cell) => sum + cell.amount, 0);\n  };\n\n  // Extract column values from the matrix\n  const extractColumnValues = (matrix: Cell[][], columnIndex: number): number[] => {\n    return matrix.map((row) => row[columnIndex].amount);\n  };\n\n  // Calculate the median for each column\n  const calculateColumnMedians = (): number[] => {\n    const numOfColumns = matrix[0]?.length || 0;\n    const medians = [];\n\n    for (let col = 0; col < numOfColumns; col++) {\n      const columnValues = extractColumnValues(matrix, col);\n      medians.push(calculateMedian(columnValues));\n    }\n\n    return medians;\n  };\n\n  const columnMedians = calculateColumnMedians();\n\n  return (\n    <div>\n      <h2>Matrix Table View</h2>\n      <table border={1}>\n        <thead>\n          <tr>\n            {matrix[0].map((_, colIndex) => (\n              <th key={colIndex}>Column {colIndex + 1}</th>\n            ))}\n            <th>Row Sum</th> {/* Extra column for row sum */}\n          </tr>\n        </thead>\n        <tbody>\n          {matrix.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell) => (\n                <td key={cell.id}>{cell.amount}</td>\n              ))}\n              <td>{calculateRowSum(row)}</td> {/* Row sum */}\n            </tr>\n          ))}\n        </tbody>\n        <tfoot>\n          <tr>\n            {columnMedians.map((median, colIndex) => (\n              <td key={colIndex}>{median}</td>\n            ))}\n            <td>Median</td> {/* Label for the footer row */}\n          </tr>\n        </tfoot>\n      </table>\n    </div>\n  );\n};\n\nexport default MatrixTable;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,eAAe,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAM9D,MAAMC,WAAuC,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAC9D;EACA,MAAMC,eAAe,GAAIC,GAAW,IAAa;IAC/C,OAAOA,GAAG,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE,CAAC,CAAC;EACxD,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAGA,CAACP,MAAgB,EAAEQ,WAAmB,KAAe;IAC/E,OAAOR,MAAM,CAACS,GAAG,CAAEP,GAAG,IAAKA,GAAG,CAACM,WAAW,CAAC,CAACF,MAAM,CAAC;EACrD,CAAC;;EAED;EACA,MAAMI,sBAAsB,GAAGA,CAAA,KAAgB;IAAA,IAAAC,QAAA;IAC7C,MAAMC,YAAY,GAAG,EAAAD,QAAA,GAAAX,MAAM,CAAC,CAAC,CAAC,cAAAW,QAAA,uBAATA,QAAA,CAAWE,MAAM,KAAI,CAAC;IAC3C,MAAMC,OAAO,GAAG,EAAE;IAElB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,YAAY,EAAEG,GAAG,EAAE,EAAE;MAC3C,MAAMC,YAAY,GAAGT,mBAAmB,CAACP,MAAM,EAAEe,GAAG,CAAC;MACrDD,OAAO,CAACG,IAAI,CAACrB,eAAe,CAACoB,YAAY,CAAC,CAAC;IAC7C;IAEA,OAAOF,OAAO;EAChB,CAAC;EAED,MAAMI,aAAa,GAAGR,sBAAsB,CAAC,CAAC;EAE9C,oBACEZ,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BzB,OAAA;MAAO0B,MAAM,EAAE,CAAE;MAAAL,QAAA,gBACfrB,OAAA;QAAAqB,QAAA,eACErB,OAAA;UAAAqB,QAAA,GACGnB,MAAM,CAAC,CAAC,CAAC,CAACS,GAAG,CAAC,CAACgB,CAAC,EAAEC,QAAQ,kBACzB5B,OAAA;YAAAqB,QAAA,GAAmB,SAAO,EAACO,QAAQ,GAAG,CAAC;UAAA,GAA9BA,QAAQ;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA2B,CAC7C,CAAC,eACFzB,OAAA;YAAAqB,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRzB,OAAA;QAAAqB,QAAA,EACGnB,MAAM,CAACS,GAAG,CAAC,CAACP,GAAG,EAAEyB,QAAQ,kBACxB7B,OAAA;UAAAqB,QAAA,GACGjB,GAAG,CAACO,GAAG,CAAEJ,IAAI,iBACZP,OAAA;YAAAqB,QAAA,EAAmBd,IAAI,CAACC;UAAM,GAArBD,IAAI,CAACuB,EAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAmB,CACpC,CAAC,eACFzB,OAAA;YAAAqB,QAAA,EAAKlB,eAAe,CAACC,GAAG;UAAC;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,KAAC;QAAA,GAJzBI,QAAQ;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRzB,OAAA;QAAAqB,QAAA,eACErB,OAAA;UAAAqB,QAAA,GACGD,aAAa,CAACT,GAAG,CAAC,CAACoB,MAAM,EAAEH,QAAQ,kBAClC5B,OAAA;YAAAqB,QAAA,EAAoBU;UAAM,GAAjBH,QAAQ;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CAChC,CAAC,eACFzB,OAAA;YAAAqB,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACO,EAAA,GA3DI/B,WAAuC;AA6D7C,eAAeA,WAAW;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}