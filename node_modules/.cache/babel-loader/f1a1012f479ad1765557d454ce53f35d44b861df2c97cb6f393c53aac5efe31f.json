{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MatrixTable from './components/MatrixTable/MatrixTable';\nimport { generateMatrix } from './utils/generateMatrix';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [matrix, setMatrix] = useState(generateMatrix(5, 5));\n  const handleCellUpdate = (rowIndex, colIndex, newAmount) => {\n    setMatrix(prevMatrix => {\n      const newMatrix = prevMatrix.map((row, rIdx) => row.map((cell, cIdx) => {\n        if (rIdx === rowIndex && cIdx === colIndex) {\n          return {\n            ...cell,\n            amount: newAmount\n          };\n        }\n        return cell;\n      }));\n      return newMatrix;\n    });\n  };\n  const handleRemoveRow = rowIndex => {\n    setMatrix(prevMatrix => prevMatrix.filter((_, index) => index !== rowIndex));\n  };\n  const handleRemoveCell = (rowIndex, colIndex) => {\n    setMatrix(prevMatrix => {\n      const newMatrix = prevMatrix.map((row, rIdx) => rIdx === rowIndex ? row.filter((_, cIdx) => cIdx !== colIndex) : row).filter(row => row.length > 0); // Remove rows if they become empty\n      return newMatrix;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MatrixTable, {\n      matrix: matrix,\n      onCellUpdate: handleCellUpdate,\n      onRemoveCell: handleRemoveCell,\n      onRemoveRow: handleRemoveRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"v0oJBLHNs0xCC6NhI+oqLfqoDaY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MatrixTable","generateMatrix","jsxDEV","_jsxDEV","App","_s","matrix","setMatrix","handleCellUpdate","rowIndex","colIndex","newAmount","prevMatrix","newMatrix","map","row","rIdx","cell","cIdx","amount","handleRemoveRow","filter","_","index","handleRemoveCell","length","children","onCellUpdate","onRemoveCell","onRemoveRow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/user/memcrab/src/App.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport MatrixTable from './components/MatrixTable/MatrixTable';\nimport { Cell } from './type/type';\nimport { generateMatrix } from './utils/generateMatrix';\n\nconst App: React.FC = () => {\n  const [matrix, setMatrix] = useState<Cell[][]>(generateMatrix(5, 5));\n\n  const handleCellUpdate = (rowIndex: number, colIndex: number, newAmount: number) => {\n    setMatrix(prevMatrix => {\n      const newMatrix = prevMatrix.map((row, rIdx) =>\n        row.map((cell, cIdx) => {\n          if (rIdx === rowIndex && cIdx === colIndex) {\n            return { ...cell, amount: newAmount };\n          }\n          return cell;\n        })\n      );\n      return newMatrix;\n    });\n  };\n\n  const handleRemoveRow = (rowIndex: number) => {\n    setMatrix(prevMatrix => prevMatrix.filter((_, index) => index !== rowIndex));\n  };\n\n  const handleRemoveCell = (rowIndex: number, colIndex: number) => {\n    setMatrix(prevMatrix => {\n      const newMatrix = prevMatrix.map((row, rIdx) =>\n        rIdx === rowIndex\n          ? row.filter((_, cIdx) => cIdx !== colIndex)\n          : row\n      ).filter(row => row.length > 0); // Remove rows if they become empty\n      return newMatrix;\n    });\n  };\n\n  return (\n    <div>\n      <MatrixTable\n        matrix={matrix}\n        onCellUpdate={handleCellUpdate}\n        onRemoveCell={handleRemoveCell}\n        onRemoveRow={handleRemoveRow}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAqB,OAAO;AACpD,OAAOC,WAAW,MAAM,sCAAsC;AAE9D,SAASC,cAAc,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAWE,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAEpE,MAAMO,gBAAgB,GAAGA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,SAAiB,KAAK;IAClFJ,SAAS,CAACK,UAAU,IAAI;MACtB,MAAMC,SAAS,GAAGD,UAAU,CAACE,GAAG,CAAC,CAACC,GAAG,EAAEC,IAAI,KACzCD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,IAAI,KAAK;QACtB,IAAIF,IAAI,KAAKP,QAAQ,IAAIS,IAAI,KAAKR,QAAQ,EAAE;UAC1C,OAAO;YAAE,GAAGO,IAAI;YAAEE,MAAM,EAAER;UAAU,CAAC;QACvC;QACA,OAAOM,IAAI;MACb,CAAC,CACH,CAAC;MACD,OAAOJ,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMO,eAAe,GAAIX,QAAgB,IAAK;IAC5CF,SAAS,CAACK,UAAU,IAAIA,UAAU,CAACS,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKd,QAAQ,CAAC,CAAC;EAC9E,CAAC;EAED,MAAMe,gBAAgB,GAAGA,CAACf,QAAgB,EAAEC,QAAgB,KAAK;IAC/DH,SAAS,CAACK,UAAU,IAAI;MACtB,MAAMC,SAAS,GAAGD,UAAU,CAACE,GAAG,CAAC,CAACC,GAAG,EAAEC,IAAI,KACzCA,IAAI,KAAKP,QAAQ,GACbM,GAAG,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEJ,IAAI,KAAKA,IAAI,KAAKR,QAAQ,CAAC,GAC1CK,GACN,CAAC,CAACM,MAAM,CAACN,GAAG,IAAIA,GAAG,CAACU,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;MACjC,OAAOZ,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEV,OAAA;IAAAuB,QAAA,eACEvB,OAAA,CAACH,WAAW;MACVM,MAAM,EAAEA,MAAO;MACfqB,YAAY,EAAEnB,gBAAiB;MAC/BoB,YAAY,EAAEJ,gBAAiB;MAC/BK,WAAW,EAAET;IAAgB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA1CID,GAAa;AAAA8B,EAAA,GAAb9B,GAAa;AA4CnB,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}