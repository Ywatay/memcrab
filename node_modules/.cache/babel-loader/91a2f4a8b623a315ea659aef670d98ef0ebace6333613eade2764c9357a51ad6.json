{"ast":null,"code":"// src/utils/matrixUtils.ts\n\nimport { generateMatrix } from './generateMatrix';\nexport const updateCellAmount = (matrix, rowIndex, colIndex, newAmount) => {\n  return matrix.map((row, rIdx) => row.map((cell, cIdx) => {\n    if (rIdx === rowIndex && cIdx === colIndex) {\n      return {\n        ...cell,\n        amount: newAmount\n      };\n    }\n    return cell;\n  }));\n};\nexport const addRow = matrix => {\n  var _matrix$;\n  const numCols = ((_matrix$ = matrix[0]) === null || _matrix$ === void 0 ? void 0 : _matrix$.length) || 0;\n  const newRow = generateMatrix(1, numCols)[0];\n  return [...matrix, newRow];\n};\nexport const removeRow = (matrix, rowIndex) => {\n  return matrix.filter((_, index) => index !== rowIndex);\n};\nexport const removeCell = (matrix, rowIndex, colIndex) => {\n  const newMatrix = matrix.map((row, rIdx) => rIdx === rowIndex ? row.filter((_, cIdx) => cIdx !== colIndex) : row).filter(row => row.length > 0); // Remove rows if they become empty\n  return newMatrix;\n};\nexport const removeColumn = (matrix, colIndex) => {\n  return matrix.map(row => row.filter((_, cIdx) => cIdx !== colIndex));\n};","map":{"version":3,"names":["generateMatrix","updateCellAmount","matrix","rowIndex","colIndex","newAmount","map","row","rIdx","cell","cIdx","amount","addRow","_matrix$","numCols","length","newRow","removeRow","filter","_","index","removeCell","newMatrix","removeColumn"],"sources":["/home/user/memcrab/src/utils/matrixUtils.ts"],"sourcesContent":["// src/utils/matrixUtils.ts\nimport { Cell } from '../type/type';\nimport { generateMatrix } from './generateMatrix';\n\nexport const updateCellAmount = (matrix: Cell[][], rowIndex: number, colIndex: number, newAmount: number): Cell[][] => {\n  return matrix.map((row, rIdx) =>\n    row.map((cell, cIdx) => {\n      if (rIdx === rowIndex && cIdx === colIndex) {\n        return { ...cell, amount: newAmount };\n      }\n      return cell;\n    })\n  );\n};\n\nexport const addRow = (matrix: Cell[][]): Cell[][] => {\n  const numCols = matrix[0]?.length || 0;\n  const newRow = generateMatrix(1, numCols)[0];\n  return [...matrix, newRow];\n};\n\nexport const removeRow = (matrix: Cell[][], rowIndex: number): Cell[][] => {\n  return matrix.filter((_, index) => index !== rowIndex);\n};\n\nexport const removeCell = (matrix: Cell[][], rowIndex: number, colIndex: number): Cell[][] => {\n  const newMatrix = matrix.map((row, rIdx) =>\n    rIdx === rowIndex\n      ? row.filter((_, cIdx) => cIdx !== colIndex)\n      : row\n  ).filter(row => row.length > 0); // Remove rows if they become empty\n  return newMatrix;\n};\n\nexport const removeColumn = (matrix: Cell[][], colIndex: number): Cell[][] => {\n  return matrix.map(row => \n    row.filter((_, cIdx) => cIdx !== colIndex)\n  );\n};\n"],"mappings":"AAAA;;AAEA,SAASA,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAgB,EAAEC,QAAgB,EAAEC,QAAgB,EAAEC,SAAiB,KAAe;EACrH,OAAOH,MAAM,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEC,IAAI,KAC1BD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,IAAI,KAAK;IACtB,IAAIF,IAAI,KAAKL,QAAQ,IAAIO,IAAI,KAAKN,QAAQ,EAAE;MAC1C,OAAO;QAAE,GAAGK,IAAI;QAAEE,MAAM,EAAEN;MAAU,CAAC;IACvC;IACA,OAAOI,IAAI;EACb,CAAC,CACH,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,MAAM,GAAIV,MAAgB,IAAe;EAAA,IAAAW,QAAA;EACpD,MAAMC,OAAO,GAAG,EAAAD,QAAA,GAAAX,MAAM,CAAC,CAAC,CAAC,cAAAW,QAAA,uBAATA,QAAA,CAAWE,MAAM,KAAI,CAAC;EACtC,MAAMC,MAAM,GAAGhB,cAAc,CAAC,CAAC,EAAEc,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5C,OAAO,CAAC,GAAGZ,MAAM,EAAEc,MAAM,CAAC;AAC5B,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGA,CAACf,MAAgB,EAAEC,QAAgB,KAAe;EACzE,OAAOD,MAAM,CAACgB,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKjB,QAAQ,CAAC;AACxD,CAAC;AAED,OAAO,MAAMkB,UAAU,GAAGA,CAACnB,MAAgB,EAAEC,QAAgB,EAAEC,QAAgB,KAAe;EAC5F,MAAMkB,SAAS,GAAGpB,MAAM,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEC,IAAI,KACrCA,IAAI,KAAKL,QAAQ,GACbI,GAAG,CAACW,MAAM,CAAC,CAACC,CAAC,EAAET,IAAI,KAAKA,IAAI,KAAKN,QAAQ,CAAC,GAC1CG,GACN,CAAC,CAACW,MAAM,CAACX,GAAG,IAAIA,GAAG,CAACQ,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;EACjC,OAAOO,SAAS;AAClB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACrB,MAAgB,EAAEE,QAAgB,KAAe;EAC5E,OAAOF,MAAM,CAACI,GAAG,CAACC,GAAG,IACnBA,GAAG,CAACW,MAAM,CAAC,CAACC,CAAC,EAAET,IAAI,KAAKA,IAAI,KAAKN,QAAQ,CAC3C,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}