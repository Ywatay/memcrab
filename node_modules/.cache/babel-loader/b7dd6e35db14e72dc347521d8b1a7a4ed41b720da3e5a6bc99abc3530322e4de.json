{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/components/MatrixContext/MatrixContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// MatrixContext.tsx\nimport React, { createContext, useState } from 'react';\n\n// Define the shape of the matrix data\n\n// Define the context shape\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create context with a default value\nconst MatrixContext = /*#__PURE__*/createContext(undefined);\nconst MatrixProvider = ({\n  children\n}) => {\n  _s();\n  const [state, setState] = useState({\n    M: 0,\n    N: 0,\n    matrix: []\n  });\n\n  // Initialize matrix with random numbers\n  const initializeMatrix = (M, N) => {\n    const matrix = Array.from({\n      length: M\n    }, (_, rowIndex) => Array.from({\n      length: N\n    }, (_, colIndex) => ({\n      id: `${rowIndex}-${colIndex}`,\n      value: Math.floor(100 + Math.random() * 900)\n    })));\n    setState({\n      M,\n      N,\n      matrix\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(MatrixContext.Provider, {\n    value: {\n      state,\n      setState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the Matrix context\n_s(MatrixProvider, \"F9EI+2CMSxnMxiKezOKcnE7YH34=\");\n_c = MatrixProvider;\nconst useMatrix = () => {\n  _s2();\n  const context = React.useContext(MatrixContext);\n  if (!context) {\n    throw new Error('useMatrix must be used within a MatrixProvider');\n  }\n  return context;\n};\n_s2(useMatrix, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { MatrixProvider, useMatrix };\nvar _c;\n$RefreshReg$(_c, \"MatrixProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","MatrixContext","undefined","MatrixProvider","children","_s","state","setState","M","N","matrix","initializeMatrix","Array","from","length","_","rowIndex","colIndex","id","value","Math","floor","random","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMatrix","_s2","context","useContext","Error","$RefreshReg$"],"sources":["/home/user/memcrab/src/components/MatrixContext/MatrixContext.tsx"],"sourcesContent":["// MatrixContext.tsx\nimport React, { createContext, useState, ReactNode, FC } from 'react';\n\n// Define the shape of the matrix data\ninterface MatrixCell {\n  id: string;\n  value: number;\n}\n\ninterface MatrixState {\n  M: number;\n  N: number;\n  matrix: MatrixCell[][];\n}\n\n// Define the context shape\ninterface MatrixContextType {\n  state: MatrixState;\n  setState: React.Dispatch<React.SetStateAction<MatrixState>>;\n}\n\n// Create context with a default value\nconst MatrixContext = createContext<MatrixContextType | undefined>(undefined);\n\ninterface MatrixProviderProps {\n  children: ReactNode;\n}\n\nconst MatrixProvider: FC<MatrixProviderProps> = ({ children }) => {\n  const [state, setState] = useState<MatrixState>({\n    M: 0,\n    N: 0,\n    matrix: [],\n  });\n\n  // Initialize matrix with random numbers\n  const initializeMatrix = (M: number, N: number) => {\n    const matrix = Array.from({ length: M }, (_, rowIndex) =>\n      Array.from({ length: N }, (_, colIndex) => ({\n        id: `${rowIndex}-${colIndex}`,\n        value: Math.floor(100 + Math.random() * 900),\n      }))\n    );\n    setState({ M, N, matrix });\n  };\n\n  return (\n    <MatrixContext.Provider value={{ state, setState }}>\n      {children}\n    </MatrixContext.Provider>\n  );\n};\n\n// Custom hook to use the Matrix context\nconst useMatrix = () => {\n  const context = React.useContext(MatrixContext);\n  if (!context) {\n    throw new Error('useMatrix must be used within a MatrixProvider');\n  }\n  return context;\n};\n\nexport { MatrixProvider, useMatrix };\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAuB,OAAO;;AAErE;;AAYA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,MAAMC,aAAa,gBAAGJ,aAAa,CAAgCK,SAAS,CAAC;AAM7E,MAAMC,cAAuC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAc;IAC9CU,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACA,MAAMC,gBAAgB,GAAGA,CAACH,CAAS,EAAEC,CAAS,KAAK;IACjD,MAAMC,MAAM,GAAGE,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEN;IAAE,CAAC,EAAE,CAACO,CAAC,EAAEC,QAAQ,KACnDJ,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEL;IAAE,CAAC,EAAE,CAACM,CAAC,EAAEE,QAAQ,MAAM;MAC1CC,EAAE,EAAE,GAAGF,QAAQ,IAAIC,QAAQ,EAAE;MAC7BE,KAAK,EAAEC,IAAI,CAACC,KAAK,CAAC,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG;IAC7C,CAAC,CAAC,CACJ,CAAC;IACDf,QAAQ,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC;IAAO,CAAC,CAAC;EAC5B,CAAC;EAED,oBACEV,OAAA,CAACC,aAAa,CAACsB,QAAQ;IAACJ,KAAK,EAAE;MAAEb,KAAK;MAAEC;IAAS,CAAE;IAAAH,QAAA,EAChDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;;AAED;AAAAtB,EAAA,CAzBMF,cAAuC;AAAAyB,EAAA,GAAvCzB,cAAuC;AA0B7C,MAAM0B,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACtB,MAAMC,OAAO,GAAGnC,KAAK,CAACoC,UAAU,CAAC/B,aAAa,CAAC;EAC/C,IAAI,CAAC8B,OAAO,EAAE;IACZ,MAAM,IAAIE,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOF,OAAO;AAChB,CAAC;AAACD,GAAA,CANID,SAAS;AAQf,SAAS1B,cAAc,EAAE0B,SAAS;AAAG,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}