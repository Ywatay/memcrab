{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/components/MatrixTable/MatrixTable.tsx\";\n// src/components/MatrixTable.tsx\nimport React from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableFooter, Paper } from '@mui/material';\nimport { calculateMedian } from '../../utils/calculateMedian';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixTable = ({\n  matrix\n}) => {\n  var _matrix$;\n  const numRows = matrix.length;\n  const numCols = ((_matrix$ = matrix[0]) === null || _matrix$ === void 0 ? void 0 : _matrix$.length) || 0;\n\n  // Calculate the sum for each row\n  const calculateRowSum = row => row.reduce((sum, cell) => sum + cell.amount, 0);\n\n  // Extract column values from the matrix\n  const extractColumnValues = (matrix, columnIndex) => matrix.map(row => {\n    var _row$columnIndex;\n    return ((_row$columnIndex = row[columnIndex]) === null || _row$columnIndex === void 0 ? void 0 : _row$columnIndex.amount) || 0;\n  });\n\n  // Calculate the median for each column\n  const calculateColumnMedians = () => {\n    const medians = [];\n    for (let col = 0; col < numCols; col++) {\n      const columnValues = extractColumnValues(matrix, col);\n      medians.push(calculateMedian(columnValues));\n    }\n    return medians;\n  };\n  const columnMedians = calculateColumnMedians();\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [Array.from({\n            length: numCols\n          }, (_, colIndex) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: [\"Cell Value N = \", colIndex + 1]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Row Sum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [row.map(cell => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: cell.amount\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: calculateRowSum(row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableFooter, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [columnMedians.map((median, colIndex) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: median\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Median\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_c = MatrixTable;\nexport default MatrixTable;\nvar _c;\n$RefreshReg$(_c, \"MatrixTable\");","map":{"version":3,"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TableFooter","Paper","calculateMedian","jsxDEV","_jsxDEV","MatrixTable","matrix","_matrix$","numRows","length","numCols","calculateRowSum","row","reduce","sum","cell","amount","extractColumnValues","columnIndex","map","_row$columnIndex","calculateColumnMedians","medians","col","columnValues","push","columnMedians","component","children","Array","from","_","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","id","median","_c","$RefreshReg$"],"sources":["/home/user/memcrab/src/components/MatrixTable/MatrixTable.tsx"],"sourcesContent":["// src/components/MatrixTable.tsx\nimport React from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableFooter, Paper } from '@mui/material';\nimport { Cell } from '../../type/type';\nimport { calculateMedian } from '../../utils/calculateMedian';\n\ninterface MatrixTableProps {\n  matrix: Cell[][];\n}\n\nconst MatrixTable: React.FC<MatrixTableProps> = ({ matrix }) => {\n  const numRows = matrix.length;\n  const numCols = matrix[0]?.length || 0;\n\n  // Calculate the sum for each row\n  const calculateRowSum = (row: Cell[]): number => row.reduce((sum, cell) => sum + cell.amount, 0);\n\n  // Extract column values from the matrix\n  const extractColumnValues = (matrix: Cell[][], columnIndex: number): number[] =>\n    matrix.map(row => row[columnIndex]?.amount || 0);\n\n  // Calculate the median for each column\n  const calculateColumnMedians = (): number[] => {\n    const medians: number[] = [];\n    for (let col = 0; col < numCols; col++) {\n      const columnValues = extractColumnValues(matrix, col);\n      medians.push(calculateMedian(columnValues));\n    }\n    return medians;\n  };\n\n  const columnMedians = calculateColumnMedians();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {Array.from({ length: numCols }, (_, colIndex) => (\n              <TableCell key={colIndex}>Cell Value N = {colIndex + 1}</TableCell>\n            ))}\n            <TableCell>Row Sum</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {matrix.map((row, rowIndex) => (\n            <TableRow key={rowIndex}>\n              {row.map((cell) => (\n                <TableCell key={cell.id}>{cell.amount}</TableCell>\n              ))}\n              <TableCell>{calculateRowSum(row)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            {columnMedians.map((median, colIndex) => (\n              <TableCell key={colIndex}>{median}</TableCell>\n            ))}\n            <TableCell>Median</TableCell>\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default MatrixTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}