{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/components/MatrixComponents/MatrixComponents.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { generateMatrix } from \"../../utils/generateMatrix\";\n\n// Define the structure of a Cell\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixComponent = ({\n  M,\n  N\n}) => {\n  _s();\n  const [matrix, setMatrix] = useState([]);\n\n  // Use the generateMatrix function to generate matrix data\n  useEffect(() => {\n    const generatedMatrix = generateMatrix(M, N);\n    setMatrix(generatedMatrix);\n  }, [M, N]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Matrix \", M, \"x\", N]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: 1,\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"ID: \", cell.id, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 33\n            }, this), \"Value: \", cell.amount]\n          }, cell.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(MatrixComponent, \"IpKR+mNvf6EI4ZyEf9QH9sEtP5A=\");\n_c = MatrixComponent;\nexport default MatrixComponent;\nvar _c;\n$RefreshReg$(_c, \"MatrixComponent\");","map":{"version":3,"names":["React","useEffect","useState","generateMatrix","jsxDEV","_jsxDEV","MatrixComponent","M","N","_s","matrix","setMatrix","generatedMatrix","children","fileName","_jsxFileName","lineNumber","columnNumber","border","map","row","rowIndex","cell","id","amount","_c","$RefreshReg$"],"sources":["/home/user/memcrab/src/components/MatrixComponents/MatrixComponents.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { generateMatrix } from \"../../utils/generateMatrix\";\n\n// Define the structure of a Cell\nexport type Cell = {\n  id: number;     // Unique value for the cell\n  amount: number; // Random three-digit number\n};\n\ninterface MatrixComponentProps {\n  M: number; // Number of rows\n  N: number; // Number of columns\n}\n\nconst MatrixComponent: React.FC<MatrixComponentProps> = ({ M, N }) => {\n  const [matrix, setMatrix] = useState<Cell[][]>([]);\n\n  // Use the generateMatrix function to generate matrix data\n  useEffect(() => {\n    const generatedMatrix = generateMatrix(M, N);\n    setMatrix(generatedMatrix);\n  }, [M, N]);\n\n  return (\n    <div>\n      <h2>Matrix {M}x{N}</h2>\n      <table border={1}>\n        <tbody>\n          {matrix.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell) => (\n                <td key={cell.id}>\n                  ID: {cell.id} <br />\n                  Value: {cell.amount}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default MatrixComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,4BAA4B;;AAE3D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,eAA+C,GAAGA,CAAC;EAAEC,CAAC;EAAEC;AAAE,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;;EAElD;EACAD,SAAS,CAAC,MAAM;IACd,MAAMW,eAAe,GAAGT,cAAc,CAACI,CAAC,EAAEC,CAAC,CAAC;IAC5CG,SAAS,CAACC,eAAe,CAAC;EAC5B,CAAC,EAAE,CAACL,CAAC,EAAEC,CAAC,CAAC,CAAC;EAEV,oBACEH,OAAA;IAAAQ,QAAA,gBACER,OAAA;MAAAQ,QAAA,GAAI,SAAO,EAACN,CAAC,EAAC,GAAC,EAACC,CAAC;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBZ,OAAA;MAAOa,MAAM,EAAE,CAAE;MAAAL,QAAA,eACfR,OAAA;QAAAQ,QAAA,EACGH,MAAM,CAACS,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACxBhB,OAAA;UAAAQ,QAAA,EACGO,GAAG,CAACD,GAAG,CAAEG,IAAI,iBACZjB,OAAA;YAAAQ,QAAA,GAAkB,MACZ,EAACS,IAAI,CAACC,EAAE,EAAC,GAAC,eAAAlB,OAAA;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,WACb,EAACK,IAAI,CAACE,MAAM;UAAA,GAFZF,IAAI,CAACC,EAAE;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGZ,CACL;QAAC,GANKI,QAAQ;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACR,EAAA,CA5BIH,eAA+C;AAAAmB,EAAA,GAA/CnB,eAA+C;AA8BrD,eAAeA,eAAe;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}