{"ast":null,"code":"import { calculateMedian } from \"../../../utils/calculateMedian\";\nexport const calculateRowSum = row => {\n  return row.reduce((sum, cell) => sum + cell.amount, 0);\n};\nexport const calculateRowAverages = row => {\n  return row.length ? calculateRowSum(row) / row.length : 0;\n};\nexport const extractColumnValues = (matrix, columnIndex) => {\n  return matrix.map(row => {\n    var _row$columnIndex;\n    return ((_row$columnIndex = row[columnIndex]) === null || _row$columnIndex === void 0 ? void 0 : _row$columnIndex.amount) || 0;\n  });\n};\nexport const calculateColumnMedians = matrix => {\n  var _matrix$;\n  const numCols = ((_matrix$ = matrix[0]) === null || _matrix$ === void 0 ? void 0 : _matrix$.length) || 0;\n  const medians = [];\n  for (let col = 0; col < numCols; col++) {\n    const columnValues = extractColumnValues(matrix, col);\n    medians.push(calculateMedian(columnValues));\n  }\n  return medians;\n};","map":{"version":3,"names":["calculateMedian","calculateRowSum","row","reduce","sum","cell","amount","calculateRowAverages","length","extractColumnValues","matrix","columnIndex","map","_row$columnIndex","calculateColumnMedians","_matrix$","numCols","medians","col","columnValues","push"],"sources":["/home/user/memcrab/src/components/MatrixTable/utils/index.ts"],"sourcesContent":["import { Cell } from \"../../../type/type\";\nimport { calculateMedian } from \"../../../utils/calculateMedian\";\n\nexport const calculateRowSum = (row: Cell[]): number => {\n  return row.reduce((sum, cell) => sum + cell.amount, 0);\n};\n\nexport const calculateRowAverages = (row: Cell[]): number => {\n  return row.length ? calculateRowSum(row) / row.length : 0;\n};\n\nexport const extractColumnValues = (matrix: Cell[][], columnIndex: number): number[] => {\n  return matrix.map(row => row[columnIndex]?.amount || 0);\n};\n\nexport const calculateColumnMedians = (matrix: Cell[][]): number[] => {\n  const numCols = matrix[0]?.length || 0;\n  const medians: number[] = [];\n  for (let col = 0; col < numCols; col++) {\n    const columnValues = extractColumnValues(matrix, col);\n    medians.push(calculateMedian(columnValues));\n  }\n  return medians;\n};\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,gCAAgC;AAEhE,OAAO,MAAMC,eAAe,GAAIC,GAAW,IAAa;EACtD,OAAOA,GAAG,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE,CAAC,CAAC;AACxD,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAIL,GAAW,IAAa;EAC3D,OAAOA,GAAG,CAACM,MAAM,GAAGP,eAAe,CAACC,GAAG,CAAC,GAAGA,GAAG,CAACM,MAAM,GAAG,CAAC;AAC3D,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAGA,CAACC,MAAgB,EAAEC,WAAmB,KAAe;EACtF,OAAOD,MAAM,CAACE,GAAG,CAACV,GAAG;IAAA,IAAAW,gBAAA;IAAA,OAAI,EAAAA,gBAAA,GAAAX,GAAG,CAACS,WAAW,CAAC,cAAAE,gBAAA,uBAAhBA,gBAAA,CAAkBP,MAAM,KAAI,CAAC;EAAA,EAAC;AACzD,CAAC;AAED,OAAO,MAAMQ,sBAAsB,GAAIJ,MAAgB,IAAe;EAAA,IAAAK,QAAA;EACpE,MAAMC,OAAO,GAAG,EAAAD,QAAA,GAAAL,MAAM,CAAC,CAAC,CAAC,cAAAK,QAAA,uBAATA,QAAA,CAAWP,MAAM,KAAI,CAAC;EACtC,MAAMS,OAAiB,GAAG,EAAE;EAC5B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,OAAO,EAAEE,GAAG,EAAE,EAAE;IACtC,MAAMC,YAAY,GAAGV,mBAAmB,CAACC,MAAM,EAAEQ,GAAG,CAAC;IACrDD,OAAO,CAACG,IAAI,CAACpB,eAAe,CAACmB,YAAY,CAAC,CAAC;EAC7C;EACA,OAAOF,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}