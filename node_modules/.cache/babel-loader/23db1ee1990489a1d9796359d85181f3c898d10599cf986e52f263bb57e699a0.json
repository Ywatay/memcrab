{"ast":null,"code":"var _jsxFileName = \"/home/user/memcrab/src/components/MatrixTable/MatrixTable.tsx\",\n  _s = $RefreshSig$();\n// src/components/MatrixTable.tsx\nimport React, { useCallback } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableFooter, Paper } from '@mui/material';\nimport { calculateMedian } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixTable = ({\n  matrix,\n  onCellUpdate\n}) => {\n  _s();\n  var _matrix$;\n  const numRows = matrix.length;\n  const numCols = ((_matrix$ = matrix[0]) === null || _matrix$ === void 0 ? void 0 : _matrix$.length) || 0;\n\n  // Calculate the sum for each row\n  const calculateRowSum = useCallback(row => {\n    return row.reduce((sum, cell) => sum + cell.amount, 0);\n  }, []);\n\n  // Extract column values from the matrix\n  const extractColumnValues = useCallback((matrix, columnIndex) => {\n    return matrix.map(row => {\n      var _row$columnIndex;\n      return ((_row$columnIndex = row[columnIndex]) === null || _row$columnIndex === void 0 ? void 0 : _row$columnIndex.amount) || 0;\n    });\n  }, []);\n\n  // Calculate the median for each column\n  const calculateColumnMedians = useCallback(() => {\n    const medians = [];\n    for (let col = 0; col < numCols; col++) {\n      const columnValues = extractColumnValues(matrix, col);\n      medians.push(calculateMedian(columnValues));\n    }\n    return medians;\n  }, [matrix, numCols, extractColumnValues]);\n  const columnMedians = calculateColumnMedians();\n\n  // Handle cell click\n  const handleCellClick = (rowIndex, colIndex) => {\n    const newAmount = matrix[rowIndex][colIndex].amount + 1;\n    onCellUpdate(rowIndex, colIndex, newAmount);\n  };\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [Array.from({\n            length: numCols\n          }, (_, colIndex) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: [\"Cell Value N = \", colIndex + 1]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Row Sum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(TableCell, {\n            onClick: () => handleCellClick(rowIndex, colIndex),\n            children: cell.amount\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: calculateRowSum(row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableFooter, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [columnMedians.map((median, colIndex) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: median\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Median\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(MatrixTable, \"Kqpf5IEcsZ56CtX7xYzNsj7gj5w=\");\n_c = MatrixTable;\nexport default MatrixTable;\nvar _c;\n$RefreshReg$(_c, \"MatrixTable\");","map":{"version":3,"names":["React","useCallback","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TableFooter","Paper","calculateMedian","jsxDEV","_jsxDEV","MatrixTable","matrix","onCellUpdate","_s","_matrix$","numRows","length","numCols","calculateRowSum","row","reduce","sum","cell","amount","extractColumnValues","columnIndex","map","_row$columnIndex","calculateColumnMedians","medians","col","columnValues","push","columnMedians","handleCellClick","rowIndex","colIndex","newAmount","component","children","Array","from","_","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","median","_c","$RefreshReg$"],"sources":["/home/user/memcrab/src/components/MatrixTable/MatrixTable.tsx"],"sourcesContent":["// src/components/MatrixTable.tsx\nimport React, { useCallback } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableFooter, Paper } from '@mui/material';\nimport { Cell, calculateMedian } from '../types';\n\ninterface MatrixTableProps {\n  matrix: Cell[][];\n  onCellUpdate: (rowIndex: number, colIndex: number, newAmount: number) => void;\n}\n\nconst MatrixTable: React.FC<MatrixTableProps> = ({ matrix, onCellUpdate }) => {\n  const numRows = matrix.length;\n  const numCols = matrix[0]?.length || 0;\n\n  // Calculate the sum for each row\n  const calculateRowSum = useCallback((row: Cell[]): number => {\n    return row.reduce((sum, cell) => sum + cell.amount, 0);\n  }, []);\n\n  // Extract column values from the matrix\n  const extractColumnValues = useCallback((matrix: Cell[][], columnIndex: number): number[] => {\n    return matrix.map(row => row[columnIndex]?.amount || 0);\n  }, []);\n\n  // Calculate the median for each column\n  const calculateColumnMedians = useCallback((): number[] => {\n    const medians: number[] = [];\n    for (let col = 0; col < numCols; col++) {\n      const columnValues = extractColumnValues(matrix, col);\n      medians.push(calculateMedian(columnValues));\n    }\n    return medians;\n  }, [matrix, numCols, extractColumnValues]);\n\n  const columnMedians = calculateColumnMedians();\n\n  // Handle cell click\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\n    const newAmount = matrix[rowIndex][colIndex].amount + 1;\n    onCellUpdate(rowIndex, colIndex, newAmount);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {Array.from({ length: numCols }, (_, colIndex) => (\n              <TableCell key={colIndex}>Cell Value N = {colIndex + 1}</TableCell>\n            ))}\n            <TableCell>Row Sum</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {matrix.map((row, rowIndex) => (\n            <TableRow key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <TableCell key={cell.id} onClick={() => handleCellClick(rowIndex, colIndex)}>\n                  {cell.amount}\n                </TableCell>\n              ))}\n              <TableCell>{calculateRowSum(row)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            {columnMedians.map((median, colIndex) => (\n              <TableCell key={colIndex}>{median}</TableCell>\n            ))}\n            <TableCell>Median</TableCell>\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default MatrixTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}