{"ast":null,"code":"// Importing the Cell type\n\n// Function to generate a random three-digit number between 100 and 999\nconst generateRandomAmount = () => Math.floor(100 + Math.random() * 900);\n\n// Function to generate the matrix\nexport const generateMatrix = (M, N) => {\n  const matrix = [];\n  let idCounter = 1;\n  for (let row = 0; row < M; row++) {\n    const rowArray = [];\n    for (let col = 0; col < N; col++) {\n      rowArray.push({\n        id: idCounter++,\n        amount: generateRandomAmount()\n      });\n    }\n    matrix.push(rowArray);\n  }\n  return matrix;\n};","map":{"version":3,"names":["generateRandomAmount","Math","floor","random","generateMatrix","M","N","matrix","idCounter","row","rowArray","col","push","id","amount"],"sources":["/home/user/memcrab/src/utils/generateMatrix.ts"],"sourcesContent":["import { Cell } from '../components/MatrixComponents/MatrixComponents'; // Importing the Cell type\n\n// Function to generate a random three-digit number between 100 and 999\nconst generateRandomAmount = (): number => Math.floor(100 + Math.random() * 900);\n\n// Function to generate the matrix\nexport const generateMatrix = (M: number, N: number): Cell[][] => {\n  const matrix: Cell[][] = [];\n  let idCounter = 1;\n\n  for (let row = 0; row < M; row++) {\n    const rowArray: Cell[] = [];\n    for (let col = 0; col < N; col++) {\n      rowArray.push({\n        id: idCounter++,\n        amount: generateRandomAmount(),\n      });\n    }\n    matrix.push(rowArray);\n  }\n\n  return matrix;\n};\n"],"mappings":"AAAwE;;AAExE;AACA,MAAMA,oBAAoB,GAAGA,CAAA,KAAcC,IAAI,CAACC,KAAK,CAAC,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;;AAEhF;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,CAAS,EAAEC,CAAS,KAAe;EAChE,MAAMC,MAAgB,GAAG,EAAE;EAC3B,IAAIC,SAAS,GAAG,CAAC;EAEjB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,CAAC,EAAEI,GAAG,EAAE,EAAE;IAChC,MAAMC,QAAgB,GAAG,EAAE;IAC3B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,CAAC,EAAEK,GAAG,EAAE,EAAE;MAChCD,QAAQ,CAACE,IAAI,CAAC;QACZC,EAAE,EAAEL,SAAS,EAAE;QACfM,MAAM,EAAEd,oBAAoB,CAAC;MAC/B,CAAC,CAAC;IACJ;IACAO,MAAM,CAACK,IAAI,CAACF,QAAQ,CAAC;EACvB;EAEA,OAAOH,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}